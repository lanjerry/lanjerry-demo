# 水平分片配置
spring:
  shardingsphere:
    datasource:
      # 配置真实数据源
      names: server-order-3320,server-order-3321
      # 配置server-order-3320数据源
      server-order-3320:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://192.168.101.117:3320/db_order?serverTimezone=UTC&useSSL=false
        username: root
        password: 123456
      # 配置server-order-3321数据源
      server-order-3321:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://192.168.101.117:3321/db_order?serverTimezone=UTC&useSSL=false
        username: root
        password: 123456
    rules:
      sharding:
        # 标准分片表配置（数据节点）
        tables:
          # 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。
          t_order:
            # 以下表达式解析结果：server-order-3320.t_order0,server-order-3320.t_order1,server-order-3321.t_order0,server-order-3321.t_order1
            actual-data-nodes: server-order-332$->{0..1}.t_order$->{0..1}
            #actual-data-nodes: server-order-332$->{0..1}.t_order0
            # 分库策略配置
            # 分片规则：order表中`user_id`为偶数时，数据插入`server-order-3320服务器`，`user_id`为奇数时，数据插入`server-order-3321服务器`。这样分片的好处是，同一个用户的订单数据，一定会被插入到同一台服务器上，查询一个用户的订单时效率较高
            database-strategy:
              standard:
                # 分片列名称
                sharding-column: user_id
                # 分片算法名称
                sharding-algorithm-name: alg_inline_userid
            # 分表策略配置
            # 分片规则：order表中`order_no的哈希值为偶数时`，数据插入对应服务器的`t_order0表`，`order_no的哈希值为奇数时`，数据插入对应服务器的`t_order1表`。因为order_no是字符串形式，因此不能直接取模。
            table-strategy:
              standard:
                # 分片列名称
                sharding-column: order_no
                # 分片算法名称
                sharding-algorithm-name: alg_hash_mod
            # 分布式序列策略配置
            key-generate-strategy:
              # 分布式序列列名称
              column: id
              # 分布式序列算法名称
              key-generator-name: alg_snowflake
          # t_order_item的分片表、分片策略、分布式序列策略和t_order一致
          t_order_item:
            actual-data-nodes: server-order-332$->{0..1}.t_order_item$->{0..1}
            # 分库策略配置
            # 分片规则：order表中`user_id`为偶数时，数据插入`server-order-3320服务器`，`user_id`为奇数时，数据插入`server-order-3321服务器`。这样分片的好处是，同一个用户的订单数据，一定会被插入到同一台服务器上，查询一个用户的订单时效率较高
            database-strategy:
              standard:
                # 分片列名称
                sharding-column: user_id
                # 分片算法名称
                sharding-algorithm-name: alg_inline_userid
            # 分表策略配置
            # 分片规则：order表中`order_no的哈希值为偶数时`，数据插入对应服务器的`t_order0表`，`order_no的哈希值为奇数时`，数据插入对应服务器的`t_order1表`。因为order_no是字符串形式，因此不能直接取模。
            table-strategy:
              standard:
                # 分片列名称
                sharding-column: order_no
                # 分片算法名称
                sharding-algorithm-name: alg_hash_mod
            # 分布式序列策略配置
            key-generate-strategy:
              # 分布式序列列名称
              column: id
              # 分布式序列算法名称
              key-generator-name: alg_snowflake
          # 广播表的配置
          t_dict:
            actual-data-nodes: server-order-332$->{0..1}.t_dict
        # 分片算法配置
        sharding-algorithms:
          # 行表达式分片算法
          alg_inline_userid:
            # 分片算法类型
            type: INLINE
            # 分片算法属性配置
            props:
              algorithm-expression: server-order-332$->{user_id % 2}
          # 取模分片算法
          alg_mod:
            # 分片算法类型
            type: MOD
            # 分片算法属性配置
            props:
              sharding-count: 1
          # 哈希取模分片算法
          alg_hash_mod:
            # 分片算法类型
            type: HASH_MOD
            # 分片算法属性配置
            props:
              sharding-count: 2
        # 分布式序列算法配置
        key-generators:
          alg_snowflake:
            # 分布式序列算法类型
            type: SNOWFLAKE
        # 绑定表规则配置
        # `绑定表：`指分片规则一致的一组分片表。 使用绑定表进行多表关联查询时，必须使用分片键进行关联，否则会出现笛卡尔积关联或跨库关联，从而影响查询效率。
        binding-tables:
          - t_order, t_order_item
        # 广播表规则配置
        broadcast-tables:
          - t_dict
